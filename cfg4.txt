program ::= declaration-list
declaration-list ::= pre-declaration declaration-list1
declaration-list1 ::= pre-declaration declaration-list1
declaration-list1 ::=
pre-declaration ::=  type-specifier declaration 
declaration ::= ID next-declaration
next-declaration ::= id-list ; 
next-declaration ::= [ NUM ]  ;
next-declaration ::= ( params ) compound-statement
id-list ::= , ID id-list
id-list ::=
var-declaration ::= type-specifier ID next-var-declaration
next-var-declaration ::= id-list ; 
next-var-declaration ::= [ NUM ]
fun-declaration ::= type-specifier ( params ) compound-statement
type-specifier ::= int  
type-specifier ::= double
params ::= param-list 
params ::= void
param-list ::= pre-param param-list1
param-list1 ::=  ,  pre-param param-list1
param-list1 ::=
pre-param ::= type-specifier ID param
param ::= [  ]
param ::=
compound-statement ::= { local-declarations statement-list }
local-declarations ::= var-declaration local-declarations
local-declarations ::= 
statement-list ::= statement statement-list
statement-list ::=
statement ::= assigned-statement
statement ::= compound-statement
statement ::= selection-statement
statement ::= iteration-statement
statement ::= return-statement
assigned-statement ::= var = expression ; 
selection-statement ::= if ( expression ) compound-statement next-selection-statement
next-selection-statement ::= else compound-statement
next-selection-statement ::= 
iteration-statement ::= while ( expression ) statement
return-statement ::= return next-return-statement
next-return-statement ::= ; 
next-return-statement ::= expression ;
var ::= ID next-var
next-var ::= [ expression ]
next-var ::= 
expression ::= additive-expression simple-expression
simple-expression ::= relop additive-expression
simple-expression ::= 
relop ::= <=
relop ::= <
relop ::= >
relop ::= >=
relop ::= ==
relop ::= !=
additive-expression ::= term additive-expression1
additive-expression1 ::= addop term additive-expression1
additive-expression1 ::= 
addop ::= +
addop ::= -
term ::= factor term1
term1 ::= mulop factor term1
term1 ::= 
mulop ::= * 
mulop ::= /
factor ::= ( expression )
factor ::= ID next-factor
factor ::= NUM
next-factor ::= [ NUM ]
next-factor ::= ( args )
next-factor ::= 
args ::= arg-list
args ::=
arg-list ::= expression arg-list1
arg-list1 ::= , expression arg-list1
arg-list1 ::= 
